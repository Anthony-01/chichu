/**
 * 游戏逻辑
 */
namespace game {
    export namespace sparrowsclm {
        const CardsData: number[] = [
            0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,						//索子
            0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,						//索子
            0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,						//索子
            0x11, 0x12, 0x13, 0x14, 0x15, 0x16, 0x17, 0x18, 0x19,						//索子
            0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,						//同子
            0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,						//同子
            0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,						//同子
            0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28, 0x29,                       //同子
        ]

        /////////////////////////////////////////////////////////////////////////

        //逻辑掩码

        export const MASK_COLOR = 0xF0								//花色掩码
        export const MASK_VALUE = 0x0F								//数值掩码

        export const MAX_INDEX  = 27                                //最大索引
        export const MIN_INDEX  = 9
        export const MAX_COUNT  = 11
        export const MAX_WEAVE  = 3
        export const MAX_HUA_CARD = 0

        //////////////////////////////////////////////////////////////////////////
        //动作定义

        //动作标志
        export const WIK_NULL = 0x00								//没有类型
        export const WIK_LEFT = 0x01								//左吃类型
        export const WIK_PENG = 0x02								//碰牌类型
        export const WIK_GANG = 0x04								//杠牌类型
        export const WIK_JIA_GANG = 0x08                                //杠牌类型
        export const WIK_BAO_HU = 0x10								//报胡类型
        export const WIK_QING_HU = 0x20                                //请胡类型 
        export const WIK_CHI_HU = 0x40                                //吃胡类型

        //扩展动作
        export const WIK_EX_CHI_BAO_HU = 0x0001                              //抓胡类型  
        export const WIK_EX_CHI_QING_HU = 0x0002                              //抓胡类型  
        export const WIK_EX_TIAN_HU = 0x0100                              //天胡类型  
        export const WIK_EX_DI_HU = 0x0200                              //地胡类型
        export const WIK_EX_FANG_PAO = 0x0400                              //放炮动作
        export const WIK_EX_CHI_HU = 0x0800                              //吃胡动作                
        export const WIK_EX_ZIMO = 0x1000                              //自摸动作
        export const WIK_EX_GANG_PAO = 0x2000                              //杠上炮
        export const WIK_EX_GANG_KAI = 0x4000                              //杠上花
        export const WIK_EX_QING_HU = 0x8000                              //请胡类型 

        //听牌类型
        export const TING_KIND_NONE = 0x00								//听牌类型
        export const TING_KIND_NORMAL = 0x01								//听牌类型
        export const TING_KIND_WUDUI = 0x02								//听牌类型

        //////////////////////////////////////////////////////////////////////////
        //胡牌定义

        //胡牌牌型
        export const CHR_PING_HU = 0x00000001						//平胡
        export const CHR_DUI_DUI_HU = 0x00000002						//对对胡
        export const CHR_QING_DUI = 0x00000004                        //清对对
        export const CHR_JIANG_DUI = 0x00000008                        //将对对
        export const CHR_QING_YI_SE = 0x00000010						//清一色
        export const CHR_WU_DUI = 0x00000020						//五小对
        export const CHR_QING_WU_DUI = 0x00000040						//清五对
        export const CHR_LONG_WU_DUI = 0x00000100						//龙五对
        export const CHR_QLONG_WU_DUI = 0x00000200						//清龙五对
        export const CHR_TAKE_YI_JIU = 0x00001000						//带幺九
        export const CHR_DUI_TAKE_YI_JIU = 0x00002000						//对对胡带幺九
        export const CHR_QING_TAKE_YI_JIU = 0x00008000						//清幺九
        export const CHR_TIAN_HU = 0x00010000                        //天胡
        export const CHR_DI_HU = 0x00020000                        //地胡 

        //加倍项
        export const CHR_BREAK_YI_JIU = 0x00100000						 //断幺九 
        export const CHR_GANG_KAI = 0x00200000                         //杠上花
        export const CHR_GANG_PAO = 0x00400000                         //杠上炮
        export const CHR_QIANG_GANG = 0x00800000                         //抢杠 
        export const CHR_HAI_DI_LAO = 0x01000000                         //海底捞
        export const CHR_HAI_DI_PAO = 0x02000000                         //海底炮
        export const CHR_BAO_JIAO = 0x04000000                         //报叫
        //////////////////////////////////////////////////////////////////////////
        class tagKindItem {
            public							cbWeaveKind: number = 0;						//组合类型
            public							cbCenterCard: number= 0;						//中心扑克
            public							cbValidIndex: number[] = [];					//实际扑克索引
        }

        class tagAnalyseItem {
            public							cbCardEye: number = 0;							//牌眼扑克
            public							cbWeaveKind: number[] = [0,0,0];				//组合类型
            public							cbCenterCard: number[] = [0,0,0];			    //中心扑克
            public                          cbCardData = utils.alloc2Array<Number>(MAX_WEAVE,4,Number);//实际扑克
        }
        export class GameLogic {

            public GetCardValue(cbCardData: number): number {
                let cbValue = 0;
                return cbValue = (cbCardData & MASK_VALUE);
            }

            public GetCardColor(cbCardData: number) :number {
                let cbColor = 0;
                return cbColor = (cbCardData & MASK_COLOR) >> 4;
            }

            //校验数据
            public IsValidCard(cbCardData): boolean {
                const cbValue= (cbCardData & MASK_VALUE);
                const cbColor= (cbCardData & MASK_COLOR) >> 4;
                return (((cbValue >= 1) && (cbValue <= 9) && (cbColor <= 2)) || ((cbValue >= 1) && (cbValue <= 0x0f) && (cbColor == 3)));
            }

            //删除扑克
            public RemoveCard(cbCardIndex: any[], cbRemoveCard: any[]) {
                //删除扑克
                for (let i=0;i<cbRemoveCard.length;i++)
                {
                    //效验扑克
                    egret.assert(this.IsValidCard(cbRemoveCard[i]));
                    egret.assert(cbCardIndex[this.SwitchToCardIndex(cbRemoveCard[i])]>0);

                    //删除扑克
                    let cbRemoveIndex=this.SwitchToCardIndex(cbRemoveCard[i]);
                    if (cbCardIndex[cbRemoveIndex]==0)
                    {
                        //错误断言
                        egret.assert(false);

                        //还原删除
                        for (let j=0;j<i;j++) 
                        {
                            egret.assert(this.IsValidCard(cbRemoveCard[j]));
                            cbCardIndex[this.SwitchToCardIndex(cbRemoveCard[j])]++;
                        }

                        return false;
                    }
                    else 
                    {
                        //删除扑克
                        --cbCardIndex[cbRemoveIndex];
                    }
                }

                return true;
            }

            //扑克转换
            public SwitchToCardData(cbCardIndex: number)
            {
                egret.assert(cbCardIndex < MAX_INDEX);
                if( cbCardIndex < 27 )
                    return ((cbCardIndex/9)<<4)|(cbCardIndex%9+1);
                else return (0x30|(cbCardIndex-27+1));
            }

            //扑克转换
            public SwitchToCardDatas(cbCardIndex: any[],cbCardData: any[]) {
                //转换扑克
                let cbPosition=0;
                for (let i=MIN_INDEX;i<MAX_INDEX;i++)
                {
                    if (cbCardIndex[i]!=0)
                    {
                        for (let j=0;j<cbCardIndex[i];j++)
                        {
                            egret.assert(cbPosition<MAX_COUNT);
                            cbCardData[cbPosition++]=this.SwitchToCardData(i);
                        }
                    }
                }

                return cbPosition;
            }

            //扑克转换
            public SwitchToCardIndex(cbCardData: number)
            {
                let cbCardIndex: number = 0;
                return cbCardIndex = ((cbCardData&MASK_COLOR)>>4)*9+(cbCardData&MASK_VALUE)-1;
            }

            //排序,根据牌值排序
            public SortCardList(  cbCardData: any[], cbCardCount: number)
            {
                //数目过虑
                if (cbCardCount==0||cbCardCount>cmd.sparrowsclm.MAX_COUNT) return false;

                //排序操作
                let bSorted: boolean=true;
                let cbSwitchData=0,cbLast=cbCardCount-1;
                do
                {
                    bSorted=true;
                    for (let i=0;i<cbLast;i++)
                    {
                        if (cbCardData[i]>cbCardData[i+1])
                        {
                            //设置标志
                            bSorted=false;

                            //扑克数据
                            cbSwitchData=cbCardData[i];
                            cbCardData[i]=cbCardData[i+1];
                            cbCardData[i+1]=cbSwitchData;
                        }	
                    }
                    cbLast--;
                } while(bSorted==false);

                return true;
            }

            //扑克数目
            public GetCardCount(cbCardIndex: number[])
            {
                //数目统计
                let cbCardCount=0;
                for (let i=MIN_INDEX;i<MAX_INDEX;i++) 
                    cbCardCount+=cbCardIndex[i];

                return cbCardCount;
            }

            //分析扑克
            public AnalyseCard(cbCardIndex: number[],  WeaveItem: cmd.sparrowsclm.tagWeaveItem[] , cbWeaveCount: number)
            {
                let  AnalyseItemArray: any[] = [];

                //计算数目
                const cbCardCount=this.GetCardCount(cbCardIndex);

                //效验数目
                egret.assert((cbCardCount>=2)&&(cbCardCount<=MAX_COUNT)&&((cbCardCount-2)%3==0));
                if ((cbCardCount<2)||(cbCardCount>MAX_COUNT)||((cbCardCount-2)%3!=0))
                    return false;

                //变量定义
                let cbKindItemCount=0;
                let KindItem = utils.allocArray<tagKindItem>(27*2+28,tagKindItem);
                
                //需求判断
                let cbLessKindItem=Math.floor((cbCardCount-2)/3);
                egret.assert((cbLessKindItem+cbWeaveCount)==MAX_WEAVE);

                //单吊判断
                if (cbLessKindItem==0)
                {
                    //效验参数
                    egret.assert((cbCardCount==2)&&(cbWeaveCount==MAX_WEAVE));

                    //牌眼判断
                    for (let i=MIN_INDEX;i<MAX_INDEX-MAX_HUA_CARD;i++)
                    {
                        if (cbCardIndex[i]==2)
                        {
                            //变量定义
                            let  AnalyseItem = new tagAnalyseItem();

                            //设置结果
                            for (let j=0;j<cbWeaveCount;j++)
                            {
                                AnalyseItem.cbWeaveKind[j]=WeaveItem[j].cbWeaveKind;
                                AnalyseItem.cbCenterCard[j]=WeaveItem[j].cbCenterCard;
                                for (let k = 0; k < 4; k++) {
                                    AnalyseItem.cbCardData[j][k]=WeaveItem[j].cbCardData[k];
                                }
                                
                            }
                            AnalyseItem.cbCardEye=this.SwitchToCardData(i);

                            //插入结果
                            AnalyseItemArray.push(AnalyseItem);

                            return true;
                        }
                    }

                    return false;
                }

                //拆分分析
                let cbMagicCardIndex = utils.allocArray<Number>(MAX_INDEX,Number);
                for (let i = MIN_INDEX; i < MAX_INDEX; i++) {
                    cbMagicCardIndex[i] = cbCardIndex[i];
                }
           
                if (cbCardCount>=3)
                {
                    for (let i=MIN_INDEX;i<MAX_INDEX-MAX_HUA_CARD;i++)
                    {
                        //同牌判断
                        //如果是财神,并且财神数小于3,则不进行组合
                        if( cbMagicCardIndex[i] >= 3 )
                        {
                            let nTempIndex = Math.min(3,Number(cbMagicCardIndex[i]));
                            do
                            {
                                egret.assert( cbKindItemCount < 27*2+28 );
                                let cbIndex = i;
                                let cbCenterCard = this.SwitchToCardData(i);

                                //设置变量
                                KindItem[cbKindItemCount].cbWeaveKind=WIK_PENG;
                                KindItem[cbKindItemCount].cbCenterCard=cbCenterCard;
                                KindItem[cbKindItemCount].cbValidIndex[0] = cbIndex;
                                KindItem[cbKindItemCount].cbValidIndex[1] = cbIndex;
                                KindItem[cbKindItemCount].cbValidIndex[2] = cbIndex;
                                cbKindItemCount++;

                            }while( --nTempIndex > 0 && nTempIndex >= 3 );
                        }

                        //连牌判断
                        if ((i<(MAX_INDEX-MAX_HUA_CARD-2))&&((i%9)<7))
                        {
                            //只要财神牌数加上3个顺序索引的牌数大于等于3,则进行组合
                            if( Number(cbMagicCardIndex[i])+Number(cbMagicCardIndex[i+1])+Number(cbMagicCardIndex[i+2]) >= 3)
                            {
                                let cbIndex: number[] = [Number(cbMagicCardIndex[i]),Number(cbMagicCardIndex[i+1]),Number(cbMagicCardIndex[i+2])]; 
                                
                                //定义变量
                                let bSuccess: boolean = false;
                                let  cbValidIndex: number[] = [0,0,0];
                                while( cbIndex[0]+cbIndex[1]+cbIndex[2] >= 3 )
                                {
                                    bSuccess=true;
                                    for( let j = 0; j < 3; j++ )
                                    {
                                        if( cbIndex[j] > 0 ) 
                                        {
                                            cbIndex[j]--;
                                            cbValidIndex[j] = i+j;
                                        }
                                        else 
                                        {
                                            bSuccess=false;
                                            break;
                                        }
                                    }
                                    if( bSuccess )
                                    {
                                        egret.assert( cbKindItemCount < 27*2+28 );
                                        KindItem[cbKindItemCount].cbWeaveKind=WIK_LEFT;
                                        KindItem[cbKindItemCount].cbCenterCard=this.SwitchToCardData(i);
                                        KindItem[cbKindItemCount].cbValidIndex = cbValidIndex;
                
                                        cbKindItemCount++;
                                    }
                                    else break;
                                }
                            }
                        }
                    }
                }

                //组合分析
                if (cbKindItemCount>=cbLessKindItem)
                {
                    //变量定义
                    let cbCardIndexTemp = utils.allocArray<Number>(MAX_INDEX,Number);
                

                    //变量定义
                    let cbIndex: number[] = [0,0,0];
                    for( let i = 0; i < 3; i++ )
                        cbIndex[i] = i;
                    let pKindItem = utils.allocArray<tagKindItem>(MAX_WEAVE,tagKindItem);
                    let KindItemTemp = utils.allocArray<tagKindItem>(MAX_WEAVE,tagKindItem);


                    //开始组合
                    do
                    {
                        //设置变量
                        for (let i = MIN_INDEX; i < MAX_INDEX; i++) {
                            cbCardIndexTemp[i] = cbCardIndex[i];
                        }
                    
                      
                      

                        //设置索引
                        if (cbIndex[cbLessKindItem-1]==(cbKindItemCount-1))
                        {   
                            let i = 0;
                            for (i=cbLessKindItem-1;i>0;i--)
                            {
                                if ((cbIndex[i-1]+1)!=cbIndex[i])
                                {
                                    let cbNewIndex=cbIndex[i-1];
                                    for (let j=(i-1);j<cbLessKindItem;j++) 
                                        cbIndex[j]=cbNewIndex+j-i+2;
                                    break;
                                }
                            }
                            if (i==0)
                                break;
                        }
                        else
                            cbIndex[cbLessKindItem-1]++;
                    } while (true);

                }

                return (AnalyseItemArray.length>0);
            }
        }
    }
}