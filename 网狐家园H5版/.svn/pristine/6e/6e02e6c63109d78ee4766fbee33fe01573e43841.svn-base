/**
 * 登录控制器
 * 网络数据解析
 * 视图切换
 */
namespace controller {
    export class LoginController extends models.Controller implements df.IController {
        /**
         * 构造
         */
        constructor() {
            super();

            //视图名称
            this.name = "LoginController"

            this.createLoginScene();

            //注册触摸
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegan, this);
            this.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);

            this.addEventListener(customEvent.CustomEvent.EVENT_ENTER_BACKGROUND, this.applicationWillEnterForeground, this);
            this.addEventListener(customEvent.CustomEvent.EVENT_BECOME_ACTIVE, this.applicationDidBecomeActive, this);
        }

        /* controller生命周期
        *  viewWillAppear
        *  viewDidAppear 
        *  viewWillDisappear 
        *  viewDidDisappear
        *  dealloc 回收资源
        */
        viewWillAppear(animated: boolean): void {
            console.log("LoginController viewWillAppear");

        }

        viewDidAppear(animated: boolean): void {
            console.log("LoginController viewDidAppear");

        }

        viewWillDisappear(animated: boolean): void {
            console.log("LoginController viewWillDisappear");
        }

        viewDidDisappear(animated: boolean): void {
            console.log("LoginController viewDidDisappear");
        }

        dealloc(): void {

            //移除监听
            this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegan, this);
            this.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);

            this.removeEventListener(customEvent.CustomEvent.EVENT_ENTER_BACKGROUND, this.applicationWillEnterForeground, this);
            this.removeEventListener(customEvent.CustomEvent.EVENT_BECOME_ACTIVE, this.applicationDidBecomeActive, this);

            console.log("LoginController dealloc");
        }


        /**进入前台
        * applicationDidBecomeActive
        */
        applicationDidBecomeActive(event: any): void {
            console.log("登录场景-进入前台");
        }

        /**进入后台
        * applicationDidBecomeActive
        */
        applicationWillEnterForeground(event: any): void {
            console.log("登录场景-进入后台");
        }


        createLoginScene(): void {
            //背景
            let sky = utils.createBitmapByName("background_png");
            this.addChild(sky);

            //加载登录层
            var logonLayer = new client.LogonLayer();
            this.addChild(logonLayer);
        }

        /**
         * 网络消息
         */
        public onMessage(e: egret.Event): void {
            let msg = <network.Message>e.data;
            var wMainCmd = msg.wMainCmd;
            switch (wMainCmd) {
                //广场登录
                case df.MDM_MB_LOGON:
                    {
                        return this.onMessageLogon(msg);
                    }
                case df.MDM_MB_SERVER_LIST:
                    {
                        return this.onMessageServerList(msg);
                    }
                default:
                    {
                        egret.assert(false, "未知消息");
                    }
            }
        }
        /**
         * 广场登录协议
         */
        public onMessageLogon(msg: network.Message) {
            switch (msg.wSubCmd) {
                //登录成功
                case df.SUB_MB_LOGON_SUCCESS:
                    {
                        return this.onSubLogonSuccess(msg);
                    }
                //登录失败 
                case df.SUB_MB_LOGON_FAILURE:
                    {
                        return this.onSubLogonFailure(msg);
                    }
                default:
                    break;
            }
        }

        /**登录成功 */
        public onSubLogonSuccess(msg: network.Message) {
            let LogonSuccess = network.onSubLogonSuccess(msg.cbBuffer);

            //保存用户
            var userData = new models.UserData(LogonSuccess);
            userData.nPlatform = this._viewFrame.getPloatForm();
            managers.FrameManager.getInstance().m_GlobalUserItem = userData;
        }

        /**登录失败 */
        public onSubLogonFailure(msg: network.Message) {
            let LogonFailure = network.onSubLogonFailure(msg.cbBuffer);
            managers.FrameManager.getInstance().showToast(LogonFailure.szDescribeString);

            managers.FrameManager.getInstance().dismissPopWait()

            //关闭socket
            managers.ServiceManager.getInstance().closeService();
        }


        /**
        * 列表消息
        */
        public onMessageServerList(msg: network.Message) {
            //种类列表
            switch (msg.wSubCmd) {
                case df.SUB_MB_LIST_KIND:
                    {
                        return this.onSubMessageListKind(msg);
                    }
                //列表信息
                case df.MDM_MB_SERVER_LIST:
                    {
                        return this.onSubMessgeServerList(msg)
                    }
                //比赛列表
                case df.SUB_MB_LIST_MATCH:
                    {
                        return this.onSubMessageMatchList(msg);
                    }
                //游戏选项
                case df.SUB_MB_GAME_OPTION:
                    {
                        return this.onSubMessageGameOpion(msg);
                    }
                //开房选项
                case df.SUB_MB_CREATE_OPTION:
                    {
                        return this.onSubMessageCreateOpion(msg);
                    }
                //登录列表
                case df.SUB_MB_LIST_LOGON:
                    {
                        return this.onSubMessageLogonList(msg);
                    }
                case df.SUB_MB_LIST_AGENT:
                    {
                        return this.onMessageListAgent(msg);
                    }
                //房间代理
                case df.SUB_MB_SERVER_AGENT:
                    {
                        return this.onSubMessageServerAgent(msg);
                    }
                //网关服务
                case df.SUB_MB_LIST_ACCESS:
                    {
                        return this.onSubMessageAccess(msg);
                    }
                case df.SUB_MB_LIST_FINISH:
                    {
                        //切换场景
                        let CientController = new controller.ClientController();
                        managers.FrameManager.getInstance().replaceScene(CientController, true);
                        managers.FrameManager.getInstance().dismissPopWait();

                        //关闭socket
                        managers.ServiceManager.getInstance().closeService();
                        return;
                    }
                case df.SUB_MB_SERVER_FINISH:
                    {
                        //切换场景
                        let CientController = new controller.ClientController();
                        managers.FrameManager.getInstance().replaceScene(CientController, true);
                        managers.FrameManager.getInstance().dismissPopWait();

                        //关闭socket
                        managers.ServiceManager.getInstance().closeService();
                        return;
                    }
                default:
                    {
                        egret.assert(false, "未知消息");
                    }
            }
        }
        public onSubMessageListKind(msg: network.Message) {

            let length = msg.wLength;

            if (length % df.LEN_GAME_LIST_ITEM != 0) return;

            //重置显示
            let listInfo = managers.ServiceManager.getInstance().getGameListInfo();
            listInfo._Info.forEach(list => {
                list.show = false;
            });

            //游戏种类
            let itemCount = length / df.LEN_GAME_LIST_ITEM;
            //记录游戏信息
            let newGamelist = [];
            //读取游戏信息
            for (let i = 0; i < itemCount; i++) {
                //读取数据
                let kindID = msg.cbBuffer.Pop_WORD();
                console.log(`wKindID is :${kindID}`);
                
                let value =  msg.cbBuffer.Pop_WORD();
                value = msg.cbBuffer.Pop_WORD();
                const sort = msg.cbBuffer.Pop_WORD();
                value = msg.cbBuffer.Pop_WORD();
                value = msg.cbBuffer.Pop_WORD();
                let str = msg.cbBuffer.Pop_UTF16(32);
                str = msg.cbBuffer.Pop_UTF16(32);
                msg.cbBuffer.Pop_WORD();
               

                var item = listInfo.isGameSupport(kindID, true);
                if (item && item.id != "-1") {
                    item.show = true;
                    item.sort = sort - listInfo.getGameFavourite(kindID);
                }

                //分站点排序
                if (df.StationSupport && df.STATION_GAME) {
                    let sid = df.STATION_ID;
                    if (df.STATION_GAME[df.STATION_ID]) {
                        if (df.STATION_GAME[df.STATION_ID][kindID]) {
                            item.sort = item.sort - 10000
                        }
                    }
                }
            }
        }


        public onSubMessgeServerList(msg: network.Message) {
            let length = msg.wLength;

            if (length % df.LEN_GAME_SERVER_ITEM != 0) return;

            //房间数目
            let itemCount = length / df.LEN_GAME_SERVER_ITEM;

            //列表容器
            let newRoomlist: { [key: number]: models.GameServerItem[] } = {};

            //比赛容器
            let newMatchList: models.GameServerItem[] = [];

            //解析数据
            for (let i = 0; i < itemCount; i++) {
                const serverItem: models.GameServerItem = new models.GameServerItem(msg.cbBuffer);
                if (!newRoomlist[serverItem.wKindID]) {
                    newRoomlist[serverItem.wKindID] = [];
                    newRoomlist[serverItem.wKindID].push(serverItem);
                } else {
                    newRoomlist[serverItem.wKindID].push(serverItem);

                    //根据sortid排序
                    const compare = function compareFunction(item1, item2) {
                        return item1.wSortID > item2.wSortID ? 1 : ((item1.wSortID == item2.wSortID) ? 0 : -1)
                    }
                    newRoomlist[serverItem.wKindID].sort(compare);
                }

                //比赛场
                if ((serverItem.wServerType & df.GAME_GENRE_MATCH) != 0) {
                    newMatchList.push(serverItem);
                }
            }

            //全局保存
            managers.ServiceManager.getInstance().getServerInfo()._lUpdateTime = egret.getTimer();
            managers.ServiceManager.getInstance().getServerInfo().UpdataRoomInfo(newRoomlist);
            managers.ServiceManager.getInstance().getServerInfo().UpdataMatchInfo(newMatchList);
        }

        public onSubMessageMatchList(msg: network.Message) {

        }
        public onSubMessageServerAgent(msg: network.Message) {
            let length = msg.wLength;
            while (msg.cbBuffer.getPosition() < length) {
                var wServerID = msg.cbBuffer.Pop_WORD();
                var wAgentCount = msg.cbBuffer.Pop_WORD();
                let agentInfo: models.AgentServer[] = [];
                for (let i = 0; i < wAgentCount; i++) {
                    let wAgentID = msg.cbBuffer.Pop_WORD();
                    let wServicePort = msg.cbBuffer.Pop_WORD();
                    agentInfo.push(new models.AgentServer(wAgentID, wServicePort))
                }

                managers.ServiceManager.getInstance().getServerInfo().upDateRoomAgentInfo(wServerID, agentInfo);
            }
        }
        public onMessageListAgent(msg: network.Message) {
            let len = msg.wLength;
            if (len % 134 != 0) return;

            let count = len / 134
            for (let i = 0; i < count; i++) {
                const wAgentID = msg.cbBuffer.Pop_WORD();
                const wAgentLevel = msg.cbBuffer.Pop_WORD();
                const dwServiceAddr = msg.cbBuffer.Pop_DWORD();
                const szServiceDomain = msg.cbBuffer.Pop_UTF16(63);

                let serverInfo = managers.ServiceManager.getInstance().getServerInfo();
                serverInfo.upDateAgentInfo(wAgentID, new models.Agent(wAgentLevel, dwServiceAddr, szServiceDomain));
            }
        }

        public onSubMessageAccess(msg: network.Message) {
            let serverInfo = managers.ServiceManager.getInstance().getServerInfo();
            serverInfo.setAccessServerInfo([]);

            let length = msg.wLength;

            if (length % df.LEN_ACCESS_ITEM != 0) return;

            var count = length / df.LEN_ACCESS_ITEM
            let accessSever = [];
            for (var i = 0; i < count; i++) {
                let item = df.tagAccessItem(msg.cbBuffer);
                accessSever.push(item);
            }
            serverInfo.setAccessServerInfo(accessSever);
        }
        public onSubMessageGameOpion(msg: network.Message) {
            var len = msg.wLength;

            while (msg.cbBuffer.getPosition() < len) {
                let wKindID = msg.cbBuffer.Pop_WORD();
                let wJsonLength = msg.cbBuffer.Pop_WORD();
                let jsonString = msg.cbBuffer.Pop_UTF16(wJsonLength / 2);

                if (wJsonLength < 5) {
                    return;
                }

                let jsonData = JSON.parse(jsonString);
                if (null == jsonData) {
                    console.log("Json error");
                }

                let optioninfo: models.OptionSpecial[] = [];
                let count = jsonData.Count
                jsonData = jsonData.Data;
                for (var i = 0; i < count; i++) {
                    let key = `type${i + 1}`;
                    let typeItem = jsonData[key];
                    let typeCount = typeItem.Count ? typeItem.Count : typeItem.TypeCount;
                    let Item = typeItem.Content ? typeItem.Content : typeItem.TypeContent;
                    let option = new models.OptionSpecial();
                    for (var j = 0; j < typeCount; j++) {
                        option.wCount = count;
                        option.name = Item[j].Name ? Item[j].Name : Item[j].ItemName;
                        option.count = Item[j].Count ? Item[j].Count : Item[j].ItemCount;
                        option.type = Item[j].Type ? Item[j].Type : Item[j].ItemType;
                        option.min = Item[j].Min ? Item[j].Min : 0;
                        option.max = Item[j].Max ? Item[j].Max : 0;
                        let Items = Item[j].Items;
                        for (var k = 0; k < Items.length; k++) {
                            if (option.type >= df.OPTION_TYPE_INPUT) {
                                option.setItem({ type: Item[j].Type });
                                if (option.type == df.OPTION_TYPE_INPUT) {
                                    let map = { describe: "", price: 0, min: 0, max: 0 };
                                    map.describe = Items[k].Describe ? Items[k].Describe : Items[k].Des;
                                    map.price = Items[k].Price ? Items[k].Price : 0;
                                    map.min = Items[k].Min ? Items[k].Min : 0;
                                    map.max = Items[k].Max ? Items[k].Max : 0;
                                    option.setItem({ type: Item[j].Type });
                                } else {
                                    let map = { describe: "", price: 0, roomCard: 0, value: 0 };
                                    map.describe = Items[k].Describe ? Items[k].Describe : Items[k].Des;
                                    map.price = Items[k].Price ? Items[k].Price : 0;
                                    map.roomCard = Items[k].roomCard ? Items[k].roomCard : 0;
                                    map.value = Items[k].Value;
                                    option.setItem(map);
                                }
                            } else {
                                let map = { describe: "", price: 0, roomCard: 0, value: 0 };
                                map.describe = Items[k].Describe ? Items[k].Describe : Items[k].Des;
                                map.price = Items[k].Price ? Items[k].Price : 0;
                                map.roomCard = Items[k].roomCard ? Items[k].roomCard : 0;
                                map.value = Items[k].Value;
                                option.setItem(map);
                            }
                        }
                       optioninfo.push(option);
                    }
                }
                let serverInfo = managers.ServiceManager.getInstance().getServerInfo();
                serverInfo.setOptionSpecialList(wKindID, optioninfo)
            }
        }
        public onSubMessageCreateOpion(msg: network.Message) {

            let length = msg.wLength;
            if (length % df.LEN_CREATE_OPTION_ITEM != 0) return;

            let count = length / df.LEN_CREATE_OPTION_ITEM
            for (let i = 0; i < count; i++) {
                let option = new models.Option();
                let wKindID = msg.cbBuffer.Pop_WORD();
                option.wPlayerCount = msg.cbBuffer.Pop_WORD();
                option.wOptionMask = msg.cbBuffer.Pop_WORD();
                //AA约战
                option.wSuportPayType = msg.cbBuffer.Pop_WORD();
                option.cbOptionCount = msg.cbBuffer.Pop_Byte();
                option.lVideoIngot_User = msg.cbBuffer.Pop_DWORD(); //视频费用 (新增)
                option.lVideoRoomCard_User = msg.cbBuffer.Pop_DWORD(); //视频费用 (新增)
                option.lVideoIngot_Owner = msg.cbBuffer.Pop_DWORD(); //视频费用 (新增)
                option.lVideoRoomCard_Owner = msg.cbBuffer.Pop_DWORD(); //视频费用 (新增)
                option.lMinBaseScore = msg.cbBuffer.Pop_LONGLONG();
                option.lMaxBaseScore = msg.cbBuffer.Pop_LONGLONG();

                var wPlayCount, dwPlayTime, lConsumeIngot, lRoomCard, lConsumeIngot_Owner, lRoomCard_Owner;
                for (var j = 0; j < 5; j++) {
                    wPlayCount = msg.cbBuffer.Pop_WORD();
                    dwPlayTime = msg.cbBuffer.Pop_DWORD();
                    lConsumeIngot = msg.cbBuffer.Pop_DWORD();
                    lConsumeIngot_Owner = msg.cbBuffer.Pop_DWORD();
                    lRoomCard = msg.cbBuffer.Pop_DWORD();
                    lRoomCard_Owner = msg.cbBuffer.Pop_DWORD();

                    option.wPlayCount.push(option.cbOptionCount > j ? wPlayCount : 0);
                    option.dwPlayTime.push(option.cbOptionCount > j ? dwPlayTime : 0);
                    option.lConsumeIngot.push(option.cbOptionCount > j ? lConsumeIngot : 0);
                    option.lRoomCard.push(option.cbOptionCount > j ? lRoomCard : 0);
                    option.lConsumeIngot_Owner.push(option.cbOptionCount > j ? lConsumeIngot_Owner : 0);
                    option.lRoomCard_Owner.push(option.cbOptionCount > j ? lRoomCard_Owner : 0); 
                }
                let serverInfo = managers.ServiceManager.getInstance().getServerInfo();
                serverInfo.setOptionList(wKindID, option);
            }
        }
        public onSubMessageLogonList(msg: network.Message) {
            let newLogonList = [];
            const len = msg.wLength;
            const count = len / 132
            for (let i = 1; i < count; i++) {
                const port = msg.cbBuffer.Pop_WORD();
                const dwAddr = msg.cbBuffer.Pop_DWORD();
                const szDomain = msg.cbBuffer.Pop_UTF16(63);
                const map = { port: port, addr: dwAddr, domain: szDomain };
                newLogonList.push(map);
            }
        }


        /** 触摸事件
         * onTouchBegan
         * onTouchMove
         * onTouchEnd
        */
        private onTouchBegan(event: egret.TouchEvent) {
            console.log("onTouch Began");
        }

        private onTouchMove(event: egret.TouchEvent) {
            console.log("onTouch move");
        }

        private onTouchEnd(event: egret.TouchEvent) {
            console.log("onTouch end");
        }
    }
}