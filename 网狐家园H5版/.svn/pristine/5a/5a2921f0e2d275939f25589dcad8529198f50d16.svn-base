/**
 * 大厅主入口
 */
namespace client {
    export class ClientLayer extends eui.UILayer {
        protected createChildren(): void {
            super.createChildren();

            this.once(egret.Event.ADDED_TO_STAGE, this.onInitLayer, this);
            this.once(egret.Event.REMOVED_FROM_STAGE, this.onExit, this);

            //注册触摸
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegan, this);
            this.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);

            //注册通知
            this.addEventListener(customEvent.CustomEvent.EVENT_PLAZA_REFRESH, this.onPlazaRefresh, this);
        }

        //初始化
        private _rollNotice: models.RollNotice;
        private onInitLayer(): void {
            let componet = new eui.Component();
            this.addChild(componet);

            componet.skinName = "resource/eui_skins/Plaza.exml";

            //排行按钮
            let rank = componet.getChildByName("bt_rank");
            rank.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //分享
            let share = componet.getChildByName("bt_share");
            share.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //客服
            let service = componet.getChildByName("bt_service");
            service.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //设置
            let set = componet.getChildByName("bt_option");
            set.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //充值
            let purchase = componet.getChildByName("bt_shop");
            purchase.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //兑换
            let exchange = componet.getChildByName("bt_exchange");
            exchange.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //活动
            let activity = componet.getChildByName("bt_activity");
            activity.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //战绩
            let archive = componet.getChildByName("bt_archive");
            archive.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //茶馆
            let teaHouse = componet.getChildByName("bt_tea");
            teaHouse.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //比赛
            let match = componet.getChildByName("bt_match");
            match.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //进入游戏
            let games = componet.getChildByName("bt_game1");
            games.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            games = componet.getChildByName("bt_game2");
            games.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            games = componet.getChildByName("bt_game3");
            games.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClick, this);

            //邀请Image
            let inviteImage = componet.getChildByName("Invite_image");
            egret.assert(null != inviteImage);
            inviteImage.$setTouchEnabled(false);

            let tw = egret.Tween.get(inviteImage, { loop: true })
                .to({ scaleX: 0.8, scaleY: 0.8 }, 800)
                .to({ scaleX: 1.0, scaleY: 1.0 }, 800)

            //活动红包
            let redPacket = componet.getChildByName("active_icon");
            egret.assert(null != redPacket);
            tw = egret.Tween.get(redPacket, { loop: true })
                .to({ scaleX: 0.2, scaleY: 0.2 }, 300)
                .to({ scaleX: 1.0, scaleY: 1.0 }, 300)
                .to({ scaleX: 1.2, scaleY: 1.2 }, 300)
                .wait(500);

            //比赛动画
            let scorll = <eui.Scroller>componet.getChildByName("lightScroll");
            let group = <eui.Group>scorll.getChildByName("lightGroup");
            let light = <eui.Image>group.getChildByName("light");

            egret.Tween.get(light, { loop: true })
                .to({ x: -15, y: 100 }, 1200)
                .wait(2000);

            for (let i = 0; i < 5; i++) {
                let str = "star" + `${i + 1}`;
                let delay = Math.random() * (2000 - 1000);
                let star = <eui.Image>componet.getChildByName(str);
                egret.Tween.get(star, { loop: true })
                    .to({ "alpha": 1.0, "rotation": 90, "scaleX": 1.0 }, 1000)
                    .to({ "alpha": 0.0, "rotation": 180, "scaleX": 0.1 }, 1000)
                    .wait(delay);
            }

            //头像框
            let headframe = <eui.Image>componet.getChildByName("head_frame");

            var handler = (e: egret.Event) => {
                console.log("头像触摸");
            }

            //用户头像
            var useritem = managers.FrameManager.getInstance().m_GlobalUserData;
            var head = models.HeadSprite.createSysHeadWithCorner(useritem, 120, 120, 40, 40, true, handler);
            utils.setAnchorLeftTop(head);
            this.addChild(head);
            head.x = 0;
            head.y = 0;

            //用户昵称
            var nick: eui.Label = <eui.Label>componet.getChildByName("nick");
            nick.text = managers.FrameManager.getInstance().m_GlobalUserData.szNickName;

            //用户ID
            var gameid: eui.Label = <eui.Label>componet.getChildByName("gameid");
            gameid.text = `${managers.FrameManager.getInstance().m_GlobalUserData.dwGameID}`

            //钻石
            var lIngot = managers.FrameManager.getInstance().m_GlobalUserData.lUserIngot;
            var ingot = utils.LabelAtlas.createLabel(utils.StringUtils.formatNumberThousands(lIngot), "general_num_list_ingot_png", ",0123456789", 15, 26);
            this.addChild(ingot);
            utils.setAnchorLeftTop(ingot);
            ingot.x = 425;
            ingot.y = 21;

            //金币
            var score = managers.FrameManager.getInstance().m_GlobalUserData.lUserScore;
            var gold = utils.LabelAtlas.createLabel(utils.StringUtils.formatNumberThousands(score), "general_num_list_gold_png", ",0123456789", 15, 26);
            this.addChild(gold);
            utils.setAnchorLeftTop(gold);
            gold.x = 752;
            gold.y = 21;

            //系统公告
            var msg = ["清凉一夏,昏地主来袭", "平台严禁赌博"];
            this._rollNotice = models.RollNotice.createNotice("general_notice_bg_png", 700, 44, msg, true, df.eRollMode.HORIZONTAL, "general_notice_icon_png");
            utils.setAnchorMidTop(this._rollNotice);
            this.addChild(this._rollNotice);
            this._rollNotice.x = 720;
            this._rollNotice.y = 60;
            this._rollNotice.setTouchHandler((e: egret.Event) => {
                console.log("系统公告");
                let controller = managers.FrameManager.getInstance().getRunningController();
                controller.addWindow(new client.NoticeLayer(controller.getRootLayer(), df.MODE_NOTICE));
            });
        }

        /**
         * 界面隐藏
         */
        viewWillDisappear(): void {
            console.log("ClientLayer preDisappear");
        }

        /**
         * 界面切入
         */
        transAnibegin(): void {
            console.log("ClientLayer transAnibegin");
        }

        /**
        * 界面切入完成
        */
        transAniFinish(): void {
            console.log("ClientLayer transAniFinish");
        }

        /**
         * 移除舞台
         */
        private onExit(): void {
            this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegan, this);
            this.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
            this.removeEventListener(customEvent.CustomEvent.EVENT_PLAZA_REFRESH, this.onPlazaRefresh, this);
        }

        /**
        *切换view 
        */
        public onChangeView(viewMode?: number) {
            //当前控制器
            var controller: models.Controller = managers.FrameManager.getInstance().getRunningController();

            //默认返回
            if (viewMode == null) {
                controller.popView();
            } else {
                //设置
                if (viewMode == df.MODE_PLAZA_OPTION) {
                    let option = new OptionLayer(this, 1);
                    option.x = this.width;
                    option.y = 0;

                    controller.showView(option, df.eControllerKind.PLAZA, true);
                } else if (viewMode == df.MODE_SERVICE) {
                    //客服
                    let service = new ServiceLayer(this);
                    service.x = this.width;
                    service.y = 0;

                    controller.showView(service, df.eControllerKind.PLAZA, true);
                }
            }
        }

        /** 触摸事件
        * onTouchBegan
        * onTouchMove
        * onTouchEnd
       */
        private onTouchBegan(event: egret.TouchEvent) {
            console.log("onTouch Began");
        }

        private onTouchMove(event: egret.TouchEvent) {
            console.log("onTouch move");

        }

        private onTouchEnd(event: egret.TouchEvent) {
            console.log("onTouch end");

        }

        /**
         * 大厅刷新通知
         */
        private onPlazaRefresh(e: egret.Event) {


        }


        /**
         * 按钮事件
         */
        private onButtonClick(e: egret.Event) {
            let button = <eui.Button>e.target;
            let name = button.name;

            egret.Tween.get(button)
                .to({ scaleX: 1.1, scaleY: 1.1 }, 100)
                .to({ scaleX: 1.0, scaleY: 1.0 }, 100);

            switch (button.name) {
                case "bt_option":
                    {
                        this.onChangeView(df.MODE_PLAZA_OPTION);
                    }
                    break;
                case "bt_service":
                    {
                        this.onChangeView(df.MODE_SERVICE);
                    }
                    break;
                case "bt_share":
                    {
                        let controller: models.Controller = <models.Controller>managers.FrameManager.getInstance().getRunningController();
                        let sharelayer = new ShareLayer(controller.getRootLayer(), 0.4)
                        controller.addWindow(sharelayer);
                    }
                    break;
            }
        }
    }
}