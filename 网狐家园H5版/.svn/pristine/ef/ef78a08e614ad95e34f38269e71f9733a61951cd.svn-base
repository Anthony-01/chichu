namespace client {
    /**
     * 登录层
     */
    export class LogonLayer extends eui.UILayer {
        /**
         * 操作类型  
         */
        readonly OperateRigest = 0; //注册
        readonly OperateLogin = 1; //账号登录 
        readonly OperateWechat = 2; //微信登录

        /**
         * 默认账号登录
         */
        private _operateCode: number = this.OperateLogin;

        /**
         * 账号
         */
        public _account: string = "";

        /**
         * 密码
         */
        public _password: string = "";

        /**
         * 提示语
         */
        public _tipsInfo: any = [];

        /**
         *提示标签
         */
        public _tipsLabel: eui.Label;

        /**
         * 提示气泡
         */
        public _bubble: eui.Image;

        /**
         * 提示人物
         */
        public _lora: eui.Button;

        public _serviceBtn: eui.Button;
        public _optionBtn: eui.Button;

        /**
         * 滚动公告
         */
        public _rollNotice: models.RollNotice;

        /**
         * 皮肤组件
         */
        public _component: eui.Component;

        /**
         * 构造
         */
        protected createChildren(): void {
            super.createChildren();

            this.name = "LogonLayer";

            var stationid = df.STATION_ID;
            if (stationid == 2008) {

                this._tipsInfo = ["你好，我是贝拉，登录遇到困难？点我可以获得帮助哦！", "注册帐号，您可以使用游戏中的更多功能！"]

            } else {
                this._tipsInfo = ["你好，我是劳拉，登录遇到困难？点我可以获得帮助哦！", "注册帐号，您可以使用游戏中的更多功能！"]
            }

            //注册监听
            this.once(egret.Event.ADDED_TO_STAGE, this.onInitLayer, this);
            this.once(egret.Event.REMOVED_FROM_STAGE, this.onExit, this);

            //注册通知
            this.addEventListener(customEvent.CustomEvent.EVENT_CONNECT_COMPLETE, this.connectComplete, this);
            this.addEventListener(customEvent.CustomEvent.EVENT_MESSAGE_DISPATCH, this.onMessage, this)
        }

        /**
         * 初始化
         */
        private onInitLayer(): void {
            //加载皮肤 
            this._component = new eui.Component();
            this.addChild(this._component);
            this._component.skinName = "resource/eui_skins/LogonLayer.exml";

            //设置根VIEW
            managers.FrameManager.getInstance().getRunningController().setRoot(this);

            //显示登录
            this.onChangeView(df.MODE_CHOOSE);

            //提示语
            this._tipsLabel = <eui.Label>this._component.getChildByName("tips_label");
            this._tipsLabel.text = this._tipsInfo[0];
            var width = this._tipsLabel.width;
            var height = this._tipsLabel.height;

            //气泡
            let bubble = <eui.Image>this._component.getChildByName("tips_bg");
            bubble.width = width + 40;
            bubble.height = height + 60;
            utils.setAnchorLeftBottom(bubble);
            bubble.x = 188;
            bubble.y = 248;
            this._bubble = bubble;

            //lora
            this._lora = <eui.Button>this._component.getChildByName("bt_lora");
            this._lora.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClickEvent, this);

            //系统公告
            var msg = ["清凉一夏,昏地主来袭", "平台严禁赌博"];
            this._rollNotice = models.RollNotice.createNotice("general_notice_bg_png", 700, 44, msg, true, df.eRollMode.VERTICAL, "general_notice_icon_png");
            utils.setAnchorMidTop(this._rollNotice);
            this.addChild(this._rollNotice);
            this._rollNotice.x = 667;
            this._rollNotice.y = 10;

            this._rollNotice.setTouchHandler((e: egret.Event) => {
                console.log("系统公告");
                let controller = managers.FrameManager.getInstance().getRunningController();
                controller.addWindow(new NoticeLayer(this, df.MODE_NOTICE));
            });

            //客服
            var btn = <eui.Button>this._component.getChildByName("btn_service");
            btn.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClickEvent, this);
            this._serviceBtn = btn;

            //设置
            btn = <eui.Button>this._component.getChildByName("btn_set");
            btn.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onButtonClickEvent, this);
            this._optionBtn = btn;

            //注册触摸
            this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegan, this);
            this.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
        }

        /**
         *切换view 
         */
        public onChangeView(viewMode?: number) {
            var controller: models.Controller = managers.FrameManager.getInstance().getRunningController();

            if (viewMode == null) {
                controller.popView();
                this._lora.visible = true;
                this._bubble.visible = true;
                this._tipsLabel.visible = true;
                this._optionBtn.visible = true;
                this._rollNotice.visible = true;
                this._serviceBtn.visible = true;
            } else {
                if (viewMode == df.MODE_SERVICE || viewMode == df.MODE_OPTION) {
                    this._lora.visible = false;
                    this._bubble.visible = false;
                    this._tipsLabel.visible = false;
                    this._optionBtn.visible = false;
                    this._rollNotice.visible = false;
                    this._serviceBtn.visible = false;
                }

                switch (viewMode) {
                    case df.MODE_CHOOSE:
                        {
                            //启动登录
                            var logonMode: LogonModeView = new LogonModeView(this);
                            logonMode.x = -this.width;
                            logonMode.y = 0;

                            controller.showView(logonMode, df.eControllerKind.LOGON, true);
                            break;
                        }

                    case df.MODE_ACCOUNT:
                        {
                            //登录输入
                            var logonView = new LogonView(this);
                            logonView.x = -this.width;
                            logonView.y = 0;

                            controller.showView(logonView, df.eControllerKind.LOGON, true);

                            break;
                        }

                    case df.MODE_REGISTER:
                        {
                            //注册账号
                            var regist = new Regist(this);
                            regist.x = -this.width;
                            regist.y = 0;

                            controller.showView(regist, df.eControllerKind.LOGON, true);
                            break;
                        }
                    case df.MODE_SERVICE:
                        {
                            //客服
                            var service = new ServiceLayer(this);
                            service.x = -this.width;
                            service.y = 0;

                            controller.showView(service, df.eControllerKind.LOGON, true);
                            break;
                        }
                    case df.MODE_OPTION:
                        {
                            //设置
                            var option = new OptionLayer(this)
                            option.x = -this.width;
                            option.y = 0;

                            controller.showView(option, df.eControllerKind.LOGON, true);
                            break;
                        }
                }
            }
        }

        /**
        * 按钮事件
        */
        public onButtonClickEvent(e: egret.Event) {
            var button = <eui.Button>e.target;
            let tw = egret.Tween.get(button)
                .to({ scaleX: 1.1, scaleY: 1.1 }, 50)
                .to({ scaleX: 1.0, scaleY: 1.0 }, 50)

            switch (button.name) {
                case "btn_service":
                case "bt_lora":
                    {
                        this.onChangeView(df.MODE_SERVICE)
                        break;
                    }
                case "btn_set":
                    {
                        this.onChangeView(df.MODE_OPTION)
                        break;
                    }

                default:
                    {
                        break;
                    }
            }
        }

        //注册
        public onRegist(): void {
            this._operateCode = this.OperateRigest;

            var host = managers.ServiceManager.getInstance().m_DefaultServerInfo.domain;
            var port = managers.ServiceManager.getInstance().m_DefaultServerInfo.port;
            managers.ServiceManager.getInstance().createSocketService(host, port);
            managers.ServiceManager.getInstance().setViewFrame(this);

            managers.FrameManager.getInstance().showPopWait("正在加载中");
        }

        //登录
        public onLogon() {
            this._operateCode = this.OperateLogin;
            var host = managers.ServiceManager.getInstance().m_DefaultServerInfo.domain;
            var port = managers.ServiceManager.getInstance().m_DefaultServerInfo.port;
            managers.ServiceManager.getInstance().createSocketService(host, port);
            managers.ServiceManager.getInstance().setViewFrame(this);

            managers.FrameManager.getInstance().showPopWait("正在加载中");
        }

        //连接成功
        public connectComplete(): void {
            var instance = managers.ServiceManager.getInstance();
            let tcpService = instance.getTcpService();

            if (this._operateCode == this.OperateRigest) {
                //发送注册
                var regist = df.CMD_MB_RegisterAccounts_WEB();
                regist.wModuleID = df.INVALID_WORD;                         //模块标识
                regist.wMarketID = df.MARKET_ID;							//渠道标识
                regist.cbDeviceType = df.DEVICE_TYPE;                       //设备类型
                regist.dwAppVersion = utils.PROCESS_VERSION(1, 1, 0, 1);		//应用版本
                regist.dwPlazaVersion = utils.PROCESS_VERSION(1, 1, 0, 0);		//广场版本

                regist.dwStationID = df.STATION_ID;				    	    //站点标识
                regist.szLogonPass = this._password;			           	//登录密码

                //注册信息
                regist.wFaceID = Math.floor(Math.random() * 19);				//头像标识
                regist.cbGender = Math.floor(Math.random() * 2);				//用户性别
                regist.szAccounts = this._account;		                	//登录帐号
                regist.szNickName = this._account;		                    //用户昵称

                //连接信息
                regist.szMachineID = utils.StringUtils.getGUID();	        //机器标识
                regist.szMobilePhone = "";                                  //电话号码

                network.sendRegister(tcpService, regist);
            } else {
                //发送登录
                var logonAccounts = df.CMD_MB_LogonAccounts_WEB();
                logonAccounts.wModuleID = df.INVALID_WORD;
                logonAccounts.wMarketID = df.MARKET_ID;
                logonAccounts.cbDeviceType = df.DEVICE_TYPE;
                logonAccounts.dwAppVersion = utils.PROCESS_VERSION(1, 1, 0, 1);
                logonAccounts.dwPlazaVersion = utils.PROCESS_VERSION(1, 1, 0, 1);
                logonAccounts.dwStationID = df.STATION_ID;
                logonAccounts.dwMappedNum = 0;
                logonAccounts.szPassword = this._password;
                logonAccounts.szAccounts = this._account;
                logonAccounts.szMachineID = "";
                logonAccounts.szMobilePhone = "";

                network.sendLogon(tcpService, logonAccounts);
            }
        }

        /**
         * 网络消息
         */
        public onMessage(e: egret.Event): void {
            let msg = <network.Message>e.data;
            var wMainCmd = msg.wMainCmd;
            switch (wMainCmd) {
                //广场登录
                case df.MDM_MB_LOGON:
                    {
                        return this.onMessageLogon(msg);
                    }
                case df.MDM_MB_SERVER_LIST:
                    {
                        return this.onMessageServerList(msg);
                    }

                default:
                    {
                        egret.assert(false, "未知消息");
                    }

            }
        }
        /**
         * 广场登录协议
         */
        public onMessageLogon(msg: network.Message) {
            switch (msg.wSubCmd) {
                //登录成功
                case df.SUB_MB_LOGON_SUCCESS:
                    {
                        return this.onSubLogonSuccess(msg);
                    }
                //登录失败 
                case df.SUB_MB_LOGON_FAILURE:
                    {
                        return this.onSubLogonFailure(msg);
                    }
                default:
                    break;
            }
        }

        /**登录成功 */
        public onSubLogonSuccess(msg: network.Message) {
            let LogonSuccess = network.onSubLogonSuccess(msg.cbBuffer);

            //保存用户
            var userData = new models.UserData(LogonSuccess);
            userData.nPlatform = (this._operateCode == this.OperateWechat) ? df.ACCOUNT_TYPE_SELF : df.ACCOUNT_TYPE_WECHAT;
            managers.FrameManager.getInstance().m_GlobalUserData = userData;
        }

        /**登录失败 */
        public onSubLogonFailure(msg: network.Message) {
            let LogonFailure = network.onSubLogonFailure(msg.cbBuffer);
            managers.FrameManager.getInstance().showToast(LogonFailure.szDescribeString);

            managers.FrameManager.getInstance().dismissPopWait()

            //关闭socket
            managers.ServiceManager.getInstance().closeService();
        }


        /**
        * 列表消息
        */
        public onMessageServerList(msg: network.Message) {
            //种类列表
            switch (msg.wSubCmd) {
                case df.SUB_MB_LIST_KIND:
                    {
                        return this.onSubMessageListKind(msg);
                    }
                //列表信息
                case df.MDM_MB_SERVER_LIST:
                    {
                        return this.onSubMessgeServerList(msg)
                    }
                //比赛列表
                case df.SUB_MB_LIST_MATCH:
                    {
                        return this.onSubMessageMatchList(msg);
                    }
                //游戏选项
                case df.SUB_MB_GAME_OPTION:
                    {
                        return this.onSubMessageGameOpion(msg);
                    }
                //开房选项
                case df.SUB_MB_CREATE_OPTION:
                    {
                        return this.onSubMessageCreateOpion(msg);
                    }
                //登录列表
                case df.SUB_MB_LIST_LOGON:
                    {
                        return this.onSubMessageLogonList(msg);
                    }
                case df.SUB_MB_LIST_AGENT:
                    {
                        return this.onMessageListAgent(msg);
                    }
                //房间代理
                case df.SUB_MB_SERVER_AGENT:
                    {
                        return this.onSubMessageServerAgent(msg);
                    }
                //网关服务
                case df.SUB_MB_LIST_ACCESS:
                    {
                        return this.onSubMessageAccess(msg);
                    }
                case df.SUB_MB_LIST_FINISH:
                    {
                        //切换场景
                        let CientController = new controller.ClientController();
                        managers.FrameManager.getInstance().replaceScene(CientController, true);
                        managers.FrameManager.getInstance().dismissPopWait();

                        //关闭socket
                        managers.ServiceManager.getInstance().closeService();
                        return;
                    }
                case df.SUB_MB_SERVER_FINISH:
                    {
                        //切换场景
                        let CientController = new controller.ClientController();
                        managers.FrameManager.getInstance().replaceScene(CientController, true);
                        managers.FrameManager.getInstance().dismissPopWait();

                        //关闭socket
                        managers.ServiceManager.getInstance().closeService();
                        return;
                    }
                default:
                    {
                        egret.assert(false, "未知消息");
                    }
            }
        }
        public onSubMessageListKind(msg: network.Message) {

            let length = msg.wLength;

            if (length % df.LEN_GAME_LIST_ITEM != 0) return;

            //重置显示
            let listInfo = managers.ServiceManager.getInstance().getGameListInfo();
            listInfo._Info.forEach(list => {
                list.show = false;
            });

            //游戏种类
            let itemCount = length / df.LEN_GAME_LIST_ITEM;
            //记录游戏信息
            let newGamelist = [];
            //读取游戏信息
            for (let i = 0; i < itemCount; i++) {
                //读取数据
                var kindID = msg.cbBuffer.Pop_WORD();
                msg.cbBuffer.Pop_WORD();
                msg.cbBuffer.Pop_WORD();
                const sort = msg.cbBuffer.Pop_WORD();
                msg.cbBuffer.Pop_WORD();
                msg.cbBuffer.Pop_WORD();
                msg.cbBuffer.Pop_UTF16(32);
                msg.cbBuffer.Pop_UTF16(32);

                var item = listInfo.isGameSupport(kindID, true);
                if (item && item.id != "-1") {
                    item.show = true;
                    item.sort = sort - listInfo.getGameFavourite(kindID);
                }

                //分站点排序
                if (df.StationSupport && df.STATION_GAME) {
                    let sid = df.STATION_ID;
                    if (df.STATION_GAME[df.STATION_ID]) {
                        if (df.STATION_GAME[df.STATION_ID][kindID]) {
                            item.sort = item.sort - 10000
                        }
                    }
                }
            }
        }

        public onSubMessgeServerList(msg: network.Message) {
            let length = msg.wLength;

            if (length % df.LEN_GAME_SERVER_ITEM != 0) return;

            //房间数目
            let itemCount = length / df.LEN_GAME_SERVER_ITEM;

            //列表容器
            let newRoomlist: { [key: number]: models.GameServerItem[] } = {};

            //比赛容器
            let newMatchList: models.GameServerItem[] = [];

            //解析数据
            for (let i = 0; i < itemCount; i++) {
                const serverItem: models.GameServerItem = new models.GameServerItem(msg.cbBuffer);
                if (!newRoomlist[serverItem.wKindID]) {
                    newRoomlist[serverItem.wKindID] = [];
                    newRoomlist[serverItem.wKindID].push(serverItem);
                } else {
                    newRoomlist[serverItem.wKindID].push(serverItem);

                    //根据sortid排序
                    const compare = function compareFunction(item1, item2) {
                        return item1.wSortID > item2.wSortID ? 1 : ((item1.wSortID == item2.wSortID) ? 0 : -1)
                    }
                    newRoomlist[serverItem.wKindID].sort(compare);
                }

                //比赛场
                if ((serverItem.wServerType & df.GAME_GENRE_MATCH) != 0) {
                    newMatchList.push(serverItem);
                }
            }

            //全局保存
            managers.ServiceManager.getInstance().getServerInfo()._lUpdateTime = egret.getTimer();
            managers.ServiceManager.getInstance().getServerInfo().UpdataRoomInfo(newRoomlist);
            managers.ServiceManager.getInstance().getServerInfo().UpdataMatchInfo(newMatchList);
        }

        public onSubMessageMatchList(msg: network.Message) {

        }
        public onSubMessageServerAgent(msg: network.Message) {
            let length = msg.wLength;
            while (msg.cbBuffer.getPosition() < length) {
                var wServerID = msg.cbBuffer.Pop_WORD();
                var wAgentCount = msg.cbBuffer.Pop_WORD();
                let agentInfo: models.AgentServer[] = [];
                for (let i = 0; i < wAgentCount; i++) {
                    let wAgentID = msg.cbBuffer.Pop_WORD();
                    let wServicePort = msg.cbBuffer.Pop_WORD();
                    agentInfo.push(new models.AgentServer(wAgentID, wServicePort))
                }

                managers.ServiceManager.getInstance().getServerInfo().upDateRoomAgentInfo(wServerID, agentInfo);
            }
        }
        public onMessageListAgent(msg: network.Message) {
            let len = msg.wLength;
            if (len % 134 != 0) return;

            let count = len / 134
            for (let i = 0; i < count; i++) {
                const wAgentID = msg.cbBuffer.Pop_WORD();
                const wAgentLevel = msg.cbBuffer.Pop_WORD();
                const dwServiceAddr = msg.cbBuffer.Pop_DWORD();
                const szServiceDomain = msg.cbBuffer.Pop_UTF16(63);

                let serverInfo = managers.ServiceManager.getInstance().getServerInfo();
                serverInfo.upDateAgentInfo(wAgentID, new models.Agent(wAgentLevel, dwServiceAddr, szServiceDomain));
            }
        }

        public onSubMessageAccess(msg: network.Message) {
            let serverInfo = managers.ServiceManager.getInstance().getServerInfo();
            serverInfo.setAccessServerInfo([]);

            let length = msg.wLength;

            if (length % df.LEN_ACCESS_ITEM != 0) return;

            var count = length / df.LEN_ACCESS_ITEM
            let accessSever = [];
            for (var i = 0; i < count; i++) {
                let item = df.tagAccessItem(msg.cbBuffer);
                accessSever.push(item);
            }
            serverInfo.setAccessServerInfo(accessSever);
        }
        public onSubMessageGameOpion(msg: network.Message) {
            var len = msg.wLength;

            while (msg.cbBuffer.getPosition() < len) {
                let wKindID = msg.cbBuffer.Pop_WORD();
                let wJsonLength = msg.cbBuffer.Pop_WORD();
                let jsonString = msg.cbBuffer.Pop_UTF16(wJsonLength / 2);

                if (wJsonLength < 5) {
                    return;
                }

                let jsonData = JSON.parse(jsonString);
                if (null == jsonData) {
                    console.log("Json error");
                }

                let optioninfo: models.OptionSpecial[] = [];
                let count = jsonData.Count
                jsonData = jsonData.Data;
                for (var i = 0; i < count; i++) {
                    let key = `type${i + 1}`;
                    let typeItem = jsonData[key];
                    let typeCount = typeItem.Count ? typeItem.Count : typeItem.TypeCount;
                    let Item = typeItem.Content ? typeItem.Content : typeItem.TypeContent;
                    let option = new models.OptionSpecial();
                    for (var j = 0; j < typeCount; j++) {
                        option.wCount = count;
                        option.name = Item[j].Name ? Item[j].Name : Item[j].ItemName;
                        option.count = Item[j].Count ? Item[j].Count : Item[j].ItemCount;
                        option.type = Item[j].Type ? Item[j].Type : Item[j].ItemType;
                        option.min = Item[j].Min ? Item[j].Min : 0;
                        option.max = Item[j].Max ? Item[j].Max : 0;
                        let Items = Item[j].Items;
                        for (var k = 0; k < Items.length; k++) {
                            if (option.type >= df.OPTION_TYPE_INPUT) {
                                option.setItem({ type: Item[j].Type });
                                if (option.type == df.OPTION_TYPE_INPUT) {
                                    let map = { describe: "", price: 0, min: 0, max: 0 };
                                    map.describe = Items[k].Describe ? Items[k].Describe : Items[k].Des;
                                    map.price = Items[k].Price ? Items[k].Price : 0;
                                    map.min = Items[k].Min ? Items[k].Min : 0;
                                    map.max = Items[k].Max ? Items[k].Max : 0;
                                    option.setItem({ type: Item[j].Type });
                                } else {
                                    let map = { describe: "", price: 0, roomCard: 0, value: 0 };
                                    map.describe = Items[k].Describe ? Items[k].Describe : Items[k].Des;
                                    map.price = Items[k].Price ? Items[k].Price : 0;
                                    map.roomCard = Items[k].roomCard ? Items[k].roomCard : 0;
                                    map.value = Items[k].Value;
                                    option.setItem(map);
                                }
                            } else {
                                let map = { describe:"", price:0, roomCard:0, value:0 };
                                map.describe = Items[k].Describe ? Items[k].Describe : Items[k].Des;
                                map.price = Items[k].Price ? Items[k].Price : 0;
                                map.roomCard = Items[k].roomCard ? Items[k].roomCard : 0;
                                map.value = Items[k].Value;
                                option.setItem(map);
                            }
                        }
                    }
                }
                let serverInfo = managers.ServiceManager.getInstance().getServerInfo();
                serverInfo.setOptionSpecialList(wKindID,optioninfo)
            }
            
        }
        public onSubMessageCreateOpion(msg: network.Message) {

            let length = msg.wLength;
            if (length % df.LEN_CREATE_OPTION_ITEM != 0) return;

            let count = length % df.LEN_CREATE_OPTION_ITEM
            for (let i = 0; i < count; i++){

            }

        }
        public onSubMessageLogonList(msg: network.Message) {

        }


        /** 触摸事件
         * onTouchBegan
         * onTouchMove
         * onTouchEnd
        */
        private onTouchBegan(event: egret.TouchEvent) {
            console.log("onTouch Began");
        }

        private onTouchMove(event: egret.TouchEvent) {
            console.log("onTouch move");

        }

        private onTouchEnd(event: egret.TouchEvent) {
            console.log("onTouch end");
        }

        //登录层退出
        private onExit(): void {
            this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegan, this);
            this.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
            this.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);
            this.removeEventListener(customEvent.CustomEvent.EVENT_CONNECT_COMPLETE, this.connectComplete, this);
            this.removeEventListener(customEvent.CustomEvent.EVENT_MESSAGE_DISPATCH, this.onMessage, this)

            managers.ServiceManager.getInstance().setViewFrame(null);
        }
    }
}