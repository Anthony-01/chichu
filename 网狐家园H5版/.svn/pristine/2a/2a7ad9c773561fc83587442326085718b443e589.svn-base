/*管理器 单例
1.0 SceneManager    切换场景
2.0 PopuManager     弹窗管理
3.0 EventManager    事件管理
4.0 GlobalData      全局数据
*/
namespace managers {

    export class FrameManager {
        /**
        *单例实例 
        */
        private static m_sInstance: FrameManager;

        /**
        *当前控制器
        */
        public m_RunningController: any;

        /**
        *游戏主舞台 
        */
        public m_MainStage: egret.Stage;

        /**
         * 玩家全局数据
         */
        public m_GlobalUserItem: models.UserData;

        /**
         * 缓存策略
         */
        public m_Localization: cache.localization;

        /**
         * 自动登录
         */
        public m_IsAuto: boolean = true;

        /**
        *获取实例 
        */
        public static getInstance(): FrameManager {
            if (this.m_sInstance == null) {
                this.m_sInstance = new FrameManager();
                this.m_sInstance.onInit();
            }
            return this.m_sInstance;
        }

        /**
        * 初始化
        */
        public onInit(): void {
            TcpServiceCtrl.getInstance().init();
            TimerCtrl.getInstance().init();
            this.m_Localization = new cache.localization();
        }

        /** 
        *游戏刷新  
        */
        public onUpdate(): void {
            TcpServiceCtrl.getInstance().onUpdate();
        }

        /**
        *当前视图
        */
        public setRunningController(controller: any): void {
            this.m_RunningController = null;
            this.m_RunningController = controller;
        }

        public getRunningController() {
            return this.m_RunningController ? this.m_RunningController : null;
        }

        /**场景切换 
        *@param newController 目标视图
        *@param animation     切换过渡
        */
        public replaceScene(newController: any, animation: boolean): void {
            let curController = this.m_RunningController;
            egret.assert(curController != null);
            egret.assert(curController.name != newController.name)


            //保存当前视图
            this.m_RunningController = null;
            this.m_RunningController = newController;

            if (animation) {
                //添加新视图
                newController.alpha = 0;
                this.m_MainStage.addChild(newController)

                //旧视图渐变成透明
                let tw = egret.Tween.get(newController);
                let tw1 = egret.Tween.get(curController);

                tw1.call(() => { curController.viewWillDisappear(animation); }, this);
                tw1.to({ "alpha": 0 }, 1000, egret.Ease.backOut);

                //新视图渐变出现
                tw.call(() => { newController.viewWillAppear(animation); }, this);
                tw.to({ "alpha": 1.0 }, 1000, egret.Ease.backIn);
                tw.call(() => { newController.viewDidAppear(animation); }, this);

                //移除旧视图,回收资源,移除事件注册等
                tw1.call(() => { curController.viewDidDisappear(animation); }, this);
                tw1.call(() => {
                    curController.dealloc()
                    this.m_MainStage.removeChild(curController);
                    curController = null;
                }, this);

            } else {
                //添加新视图
                newController.viewWillAppear(animation);
                this.m_MainStage.addChild(newController);
                newController.viewDidAppear(animation);

                //移除旧视图
                curController.viewWillDisappear(animation)
                curController.viewDidDisappear(animation)
                curController.dealloc()
                this.m_MainStage.removeChild(curController);
            }
        }

        /**
         * 对话框
         */
        public showDailog(style: number, content: string, okCallfun?: any, cancellCallfun?: any): void {
            if (null != this.m_MainStage.getChildByName("Dialog")) {
                return;
            }
        }

        /**
         * 显示Toast
         */
        public showToast(message: string, delaytime?: number): void {
            let toast = new models.Toast();
            this.m_MainStage.addChildAt(toast, 1000);
            toast.show(message, delaytime);

        }

        /**
         * 等待
         */
        public showPopWait(content: string, isClose: boolean = false, timeOutHandler?: any, closeHandler?: any): void {
            //检测重复
            if (null != this.m_MainStage.getChildByName("PopWait")) {
                return;
            }

            let popWait = new models.PopWait(content, df.Default_Time_Out, isClose, timeOutHandler, closeHandler)
            this.m_MainStage.addChildAt(popWait, df.TOP_ZORDER);
        }

        /**
         * 移除等待
         */
        public dismissPopWait(): void {
            let popWait = this.m_MainStage.getChildByName("PopWait")

            if (null == popWait) {
                return;
            }

            this.m_MainStage.removeChild(popWait);
        }
    }
}