/**
 * 断勾卡血战麻将
 */
namespace game {
    export namespace sparrowsclm {
        /**
         * 游戏引擎
         * 游戏协议
         * 场景消息
         * 用户服务
         */
        export class GameClientEngine extends models.GameModel implements df.IGameMessage, df.IUserService {

            /**
             * 构造
             */
            constructor(engine: any) {
                super();
            }

            protected createChildren(): void {
                super.createChildren();

                this.name = "GameClientEngine";

                this.once(egret.Event.ADDED_TO_STAGE, this.onInitLayer, this);
                this.once(egret.Event.REMOVED_FROM_STAGE, this.onExit, this);

                //设置业务代理
                this._gameFrame.setDelegate(this);

                //注册触摸
                this.addEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegan, this);
                this.addEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
                this.addEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);

                //注册通知
                this.addEventListener(customEvent.CustomEvent.EVENT_USER_ENTER, this.onUserEnter, this);
                this.addEventListener(customEvent.CustomEvent.EVENT_USER_ENTER, this.onUserStatus, this);
            }

            /**初始化 */
            private onInitLayer(): void {
                this._gameviewLayer = new GameViewLayer(this);
                this.addChild(this._gameviewLayer);
               
            }
            /**变量初始化 */
            onInitEngine() {
                super.onInitEngine();
            }

            /**变量重置*/
            onResetEngine() {

            }

            /**游戏状态 */
            private _cbGameStatus: number = 0;
            public getGameStatus() {
                return this._cbGameStatus;
            }

            /**用户进入 */
            onUserEnter(object: any): void {
            
            }
            /**用户状态 */
            onUserStatus(object: any): void {

            }
            /**用户聊天 */
            onUserChat(object: any): void {

            }
            /**用户分数 */
            onUserScore(object: any): void {

            }
            /**游戏场景 */
            onGameScene(status: number,object: any): void {
                console.log("GameClientEngine: 游戏场景");
                this._cbGameStatus = status;
            }
            /**游戏协议 */
            onGameMessage(object: any): void {
                console.log("GameClientEngine: 游戏协议");
            }
            /**系统消息 */
            onGameSystemMessage(object: any): void {

            }

            /** 触摸事件
            * onTouchBegan
            * onTouchMove
            * onTouchEnd
            */
            private onTouchBegan(event: egret.TouchEvent) {
                //console.log("onTouch Began");
                this._bMoved = false;
            }

            private _bMoved = false;
            private onTouchMove(event: egret.TouchEvent) {
                //console.log("onTouch move");
                this._bMoved = true;
            }

            private onTouchEnd(event: egret.TouchEvent) {
                //console.log("onTouch end");

            }

            /**返回大厅 */
            public onQueryExitGame() {
                //游戏状态判断
                const msg = this.getGameStatus() == cmd.sparrowsclm.GAME_SCENE_FREE ? "是否确定退出游戏？" : "游戏已经开始，退出将由憨憨机器人代打哦！\n 是否确定退出游戏？"

                managers.FrameManager.getInstance().showDailog(df.eDialogMode.OK_CANCELL,msg,()=>{
                    managers.FrameManager.getInstance().showPopWait("",3000);
                    this.onExitGame(this.getGameStatus() == cmd.sparrowsclm.GAME_SCENE_FREE ? true : false);
                });

            }

            /**移除舞台 */
            public onExit() {
                super.onExit();
                //移除触摸
                this.removeEventListener(egret.TouchEvent.TOUCH_BEGIN, this.onTouchBegan, this);
                this.removeEventListener(egret.TouchEvent.TOUCH_MOVE, this.onTouchMove, this);
                this.removeEventListener(egret.TouchEvent.TOUCH_END, this.onTouchEnd, this);

                //移除通知
                this.removeEventListener(customEvent.CustomEvent.EVENT_USER_ENTER, this.onUserEnter, this);
                this.removeEventListener(customEvent.CustomEvent.EVENT_USER_ENTER, this.onUserStatus, this);
            }
        }
    }
}