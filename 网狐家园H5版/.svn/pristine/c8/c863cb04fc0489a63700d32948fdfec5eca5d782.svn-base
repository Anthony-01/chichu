var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
/*管理器 单例
1.0 SceneManager    切换场景
2.0 PopuManager     弹窗管理
3.0 EventManager    事件管理
4.0 LocalizeManager 本地化管理
*/
var managers;
(function (managers) {
    var GameManager = (function () {
        function GameManager() {
        }
        /**
        *获取实例
        */
        GameManager.getInstance = function () {
            if (this.m_sInstance == null) {
                this.m_sInstance = new GameManager();
                this.m_sInstance.onInit();
            }
            return this.m_sInstance;
        };
        /**
        * 初始化
        */
        GameManager.prototype.onInit = function () {
            managers.ServiceManager.getInstance().init();
            managers.TimerControl.getInstance().init();
        };
        /**
        *游戏刷新
        */
        GameManager.prototype.onUpdate = function () {
            managers.ServiceManager.getInstance().onUpdate();
        };
        /**
        *当前视图
        */
        GameManager.prototype.setRunningController = function (controller) {
            this.m_RunningController = null;
            this.m_RunningController = controller;
        };
        GameManager.prototype.getRunningController = function () {
            return this.m_RunningController ? this.m_RunningController : null;
        };
        /**场景切换
        *@param newController 目标视图
        *@param animation     切换过渡
        */
        GameManager.prototype.replaceScene = function (newController, animation) {
            var _this = this;
            var curController = this.m_RunningController;
            egret.assert(curController != null);
            egret.assert(curController.name != newController.name);
            managers.ServiceManager.getInstance().setDelegate(null);
            if (animation) {
                //添加新视图
                newController.alpha = 0;
                this.m_MainStage.addChild(newController);
                //旧视图渐变成透明
                var tw = egret.Tween.get(newController);
                var tw1 = egret.Tween.get(curController);
                tw1.call(function () { curController.viewWillDisappear(animation); }, this);
                tw1.to({ "alpha": 0 }, 1000, egret.Ease.backOut);
                //新视图渐变出现
                tw.call(function () { newController.viewWillAppear(animation); }, this);
                tw.to({ "alpha": 1.0 }, 1000, egret.Ease.backIn);
                tw.call(function () { newController.viewDidAppear(animation); }, this);
                //移除旧视图,回收资源,移除事件注册等
                tw1.call(function () { curController.viewDidDisappear(animation); }, this);
                tw1.call(function () {
                    curController.dealloc();
                    _this.m_MainStage.removeChild(curController);
                    curController = null;
                }, this);
                //保存当前视图
                tw.call(function () {
                    _this.m_RunningController = null;
                    _this.m_RunningController = newController;
                    managers.ServiceManager.getInstance().setDelegate(_this.m_RunningController);
                }, this);
            }
            else {
                //添加新视图
                newController.viewWillAppear(animation);
                this.m_MainStage.addChild(newController);
                newController.viewDidAppear(animation);
                //移除旧视图
                curController.viewWillDisappear(animation);
                curController.viewDidDisappear(animation);
                curController.dealloc();
                this.m_MainStage.removeChild(curController);
                managers.ServiceManager.getInstance().setDelegate(this.getRunningController());
                //移除引用
                this.m_RunningController = null;
                //保存当前视图
                this.m_RunningController = newController;
            }
        };
        GameManager.prototype.showDailog = function (style, content, okCallfun, cancellCallfun) {
            if (null != this.m_MainStage.getChildByName("Dialog")) {
                return;
            }
        };
        GameManager.prototype.showToast = function (message, delaytime) {
            var toast = new models.Toast();
            this.m_MainStage.addChildAt(toast, 1000);
            toast.show(message, delaytime);
        };
        GameManager.prototype.showPopWait = function (content, timeOutCallfunc) {
            //检测重复
            if (null != this.m_MainStage.getChildByName("PopWait")) {
                return;
            }
            var popWait = new models.PopWait();
            this.m_MainStage.addChildAt(popWait, 1000);
            if (null != content) {
                popWait.setContent(content);
            }
            if (null != timeOutCallfunc) {
                popWait.setTimeOutCallfunc(timeOutCallfunc);
            }
        };
        GameManager.prototype.dismissPopWait = function () {
            var popWait = this.m_MainStage.getChildByName("PopWait");
            if (null == popWait) {
                return;
            }
            this.m_MainStage.removeChild(popWait);
        };
        return GameManager;
    }());
    managers.GameManager = GameManager;
    __reflect(GameManager.prototype, "managers.GameManager");
})(managers || (managers = {}));
//# sourceMappingURL=GameManager.js.map