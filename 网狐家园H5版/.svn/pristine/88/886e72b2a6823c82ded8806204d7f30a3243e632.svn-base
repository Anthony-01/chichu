/** 
 * 网络服务
**/

namespace managers{

    /** @param MAX_MSG
     * 每次处理消息包
     * 每一帧压力不宜过大
     */
    const MAXMSG: number = 100;

    export class ServiceManager
    {
        /**
        *单例实例 
        */
        private static m_sInstance: ServiceManager;

        /**
         * 消息队列
         */
        MsgQueue: utils.Message[] = [];

        /**
         * 当前服务
         */
        private m_pTcpService: any;

        /**
         * 服务类型 
         */
        private m_eServiceMode: number = df.eServiceKind.LogonService;

        /**
         * 业务代理
         */
        private _viewFrame: any;

        /**
        *获取当前实例
        */
        public static getInstance(): ServiceManager
        {
            if(this.m_sInstance == null)
            {
                this.m_sInstance = new ServiceManager();
                this.m_sInstance.init();
            }
            return this.m_sInstance;
         }


        public init():void
        {
            //TCP服务
            this.m_pTcpService = null;

            //服务类型
            this.m_eServiceMode = df.eServiceKind.LogonService;
        }

        /**
         * 设置服务类型 
         */
        public setServiceMode(mode: number)
        {
            this.m_eServiceMode = mode;
        }

        /**
         * 消息代理
         */
        public setViewFrame(view: any)
        {
            this._viewFrame = null;

            if (null == view)
                return;

            this._viewFrame = view;
        }

        public getViewFrame()
        {
            return this._viewFrame ? this._viewFrame : null;
        }

        /**
         * 获取TCP服务
         */
        public getTcpService()
        {
            return this.m_pTcpService ? this.m_pTcpService : null;
        }

        //创建服务
        public createSocketService(host: string,port: number,serviceMode: number = df.eServiceKind.LogonService)
        {
            var tcpService = new service.TcpSocketService();
            tcpService.createConnect(host,port);

            this.m_pTcpService = tcpService;
            this.m_eServiceMode = serviceMode;
        }

         /**
          * 刷新服务
          */
         onUpdate():void
         {
             //服务刷新
            if (this.m_pTcpService && this.m_pTcpService.onUpdate)
            {
                this.m_pTcpService.onUpdate();
            }
            
            if (this.MsgQueue.length == 0)   return;
           
            
            //处理队列
            if (this._viewFrame && this._viewFrame.onMessage)
            {   
                //消息处理
                var queue: utils.Message[] = [];
                if (this.MsgQueue.length > MAXMSG)
                {
                    for (var i = 0;i < MAXMSG;i++)
                    {
                        var msg = this.MsgQueue[0];
                        queue.push(msg);
                        this.MsgQueue.shift();
                    }
                }else
                {
                    this.MsgQueue.forEach(msg => {
                        queue.push(msg);
                    }); 

                    this.MsgQueue = [];
                }

                //消息处理
                do{
                    //消息分发
                    var msg = queue[0];
                    if (null != this._viewFrame)
                    {
                        this._viewFrame.dispatchEvent(new customEvent.CustomEvent(customEvent.CustomEvent.EVENT_MESSAGE_DISPATCH,false,false,msg));
                    }
                    queue.shift();
                } while(queue.length)
            }else
            {
                console.log("_viewFrame 为空"); 
            }
         }
    }
}    