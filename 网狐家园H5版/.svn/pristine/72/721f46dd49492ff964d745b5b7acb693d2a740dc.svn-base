/**
 * 游戏框架
 */
namespace frame {

    const NORMAL = 0
    const RETRY = 1
    const BATTLE = 2
    const DISTRIBUTE = 4
    const MATCH = 5
    const VIDEO = 6

    const ACTION_TYPE_GAME = 1
    const ACTION_TYPE_FRAME = 2

    export class GameFrame {
        private _delegate: any;                                              //代理对象
        private _dispatcher: egret.EventDispatcher;                          //通知实例
        private _dismissState: { [key: number]: number } = {};               //约战状态
        private _wKindID = df.INVALID_WORD;                                  //游戏ID
        private _dwKindVersion = 0                                           //游戏版本
        private _wTableCount = 0                                             //桌子数目
        private _wChairCount = 0                                             //椅子数目
        private _wServerType = 0                                             //游戏类型
        private _dwServerRule = 0                                            //游戏规则                 
        private _UserList: models.UserItem[] = [];                           //用户列表
        private _TableUserList: { [key: number]: models.UserItem[] } = {}    //玩家MAP
        private _TableStatus: { [key: number]: number } = {}                 //桌子状态
        private _BattleUserInfo = {}                                         //约战玩家信息

        private _wTableID = df.INVALID_TABLE                                 //桌子ID
        private _wChairID = df.INVALID_CHAIR                                 //椅子ID
        private _wVideoChair = df.INVALID_CHAIR;                               
        private _cbTableLock = 0
        private _cbGameStatus = 0                                            //游戏状态
        private _cbAllowLookon = 0                                           //允许旁观

        private _PlayCountEx = 0;                                            //游戏人数
        private _BattleParam: df.CMD_GF_TableParam;                          //约战信息
        private _LogonType: number = NORMAL;                                 //连接类型

        constructor(delegate) {
            this._delegate = delegate;
            this._dispatcher = new egret.EventDispatcher();
            this.addEventListener();
        }

        /**设置版本 */
        public setKindInfo(kindID: number, version: number) {
            this._wKindID = kindID;
            this._dwKindVersion = version;
        }

        /**通知实例 */
        public getDispatcher() {
            return this._dispatcher;
        }

        //观看模式
        public isLookonMode() {

        }
        /**服务类型 */
        public getServerType(): number {
            return this._wServerType;
        }
        /**金币模式 */
        public isGoldMode(): boolean {
            return this._wServerType && ((this._wServerType&df.GAME_GENRE_GOLD) != 0);
        }
        /**积分模式 */
        public isScoreMode(): boolean {
            return this._wServerType && ((this._wServerType&df.GAME_GENRE_SCORE) != 0);
        }
        /**比赛模式 */
        public isMatchMode(): boolean {
            return this._wServerType && ((this._wServerType&df.GAME_GENRE_MATCH) != 0);
        }
        /**约战模式 */
        public isBattleMode(): boolean {
            if (this.isVedioMode()) {
                return this._wServerType && ((this._wServerType&df.TABLE_GENRE_CREATE) != 0)
            }
            return this._LogonType == BATTLE;
        }
        /**视频模式 */
        public isVedioMode(): boolean {
            return this._LogonType == VIDEO;
        }

        /*获取游戏状态*/
        public getGameStatus() {
            return this._cbGameStatus
        }

        //设置游戏状态
        public setGameStatus(cbGameStatus) {
            this._cbGameStatus = cbGameStatus;
        }

        //椅子张数
        public getChairCount() {
            return this._wChairCount;
        }

        //桌子张数
        public getTableCount() {
            return this._wTableCount;
        }

        //获取桌子ID
        public getTableID() {
            return this._wTableID;
        }

        //获取椅子ID
        public getChairID() {
            if (this._LogonType == VIDEO)
                return this._wVideoChair - 1;
            return this._wChairID;
        }

        /**
         * 添加监听
         */
        public addEventListener() {
            //注册通知
            this._dispatcher.addEventListener(customEvent.CustomEvent.EVENT_CONNECT_COMPLETE, this.connectComplete, this);
            this._dispatcher.addEventListener(customEvent.CustomEvent.EVENT_MESSAGE_DISPATCH, this.onMessage, this);
        }

        /**
         * 移除监听
         */
        public removeEventListener() {
            this._dispatcher.removeEventListener(customEvent.CustomEvent.EVENT_CONNECT_COMPLETE, this.connectComplete, this);
            this._dispatcher.removeEventListener(customEvent.CustomEvent.EVENT_MESSAGE_DISPATCH, this.onMessage, this);
        }

        /**连接成功*/
        public connectComplete(): void {
            if (this._delegate && this._delegate.connectComplete) {
                this._delegate.connectComplete();
            }

            //过滤比赛
            if (this._LogonType == MATCH)
                return;

            //登录房间   
            let logonRoom = new df.CMD_GR_LogonByMobile();
            logonRoom.wGameID = this._wKindID;
            logonRoom.dwPlazaVersion = utils.PROCESS_VERSION(1, 1, 0, 1);
            logonRoom.dwProcessVersion = this._dwKindVersion;
            logonRoom.cbDeviceType = df.DEVICE_TYPE;
            logonRoom.wBehaviorFlags = (this._LogonType == NORMAL) ? 0x1102 : 0x0102;
            logonRoom.wPageTableCount = 1;
            logonRoom.dwUserStationID = managers.FrameManager.getInstance().m_GlobalUserItem.dwStationID;
            logonRoom.dwPlazaStationID = df.STATION_ID;
            logonRoom.dwUserID = managers.FrameManager.getInstance().m_GlobalUserItem.dwUserID;
            logonRoom.szPasspublic = managers.FrameManager.getInstance().m_GlobalUserItem.szPassword;
            logonRoom.szServerPasswdf = "";
            logonRoom.szMachineID = managers.FrameManager.getInstance().m_GlobalUserItem.szMachine;
            logonRoom.dGlobalPosLng = 0;
            logonRoom.dGlobalPosLat = 0;
            logonRoom.dwMatchID = 0;
            logonRoom.lMatchNo = 0;
        }

        /** 网络消息*/
        public onMessage(e: egret.Event): void {
            let msg = e.data as network.Message;
            const wMainCmd = msg.wMainCmd;
            const wSubCmd = msg.wSubCmd;
            switch (wMainCmd) {
                case df.MDM_GR_LOGON:
                    {

                    }
                    break;
                case df.MDM_GR_CONFIG:
                    {

                    }
                    break;
                case df.MDM_GR_USER:
                    {

                    }
                    break;
                case df.MDM_GR_STATUS:
                    {

                    }
                    break;
                case df.MDM_GR_MATCH:
                    {

                    }
                    break;
                case df.MDM_GF_FRAME:
                    {

                    }
                    break;
                case df.MDM_GF_GAME:
                    {

                    }
                    break;
                case df.MDM_CM_SYSTEM:
                    {

                    }
                    break;
            }
        }

        /**登录比赛 */
        public onLogonMatch(MatchGroupItem: any) {

        }

        /**登录普通房间 */
        public onLogonRoom() {
            
        }

        /**登录约战房 */
        public onLogonBattleRoom(mode: number) {

        }
        
        /**刷新代理 */
        private onFlushAgent() {

        }

        /**请求坐下 */
        public sitDown(table,chair,password) {

        }

        /**用户查询 */
        public queryUserInfoID(id,tableid) {

        }

        /**查询用户 */
        public queryUserInfo(tableid ,chair) {

        }

        /**请求换桌 */
        public onChangeDesk() {

        }

        /**请求起立 */
        public standUp(bForce) {

        }

        /**用户准备*/
        public userReady() {

        }

        /**请求场景 */
        public sendGameOption() {

        }

        /**发送解散 */
        public sendTableDismiss(wTableID) {

        }

        /**发起投票解散 */
        public sendVoteDissmiss(){

        }

        /**投票解散 */
        public sendBallotDismiss(bAgreeDismiss) {

        }

        /**游戏聊天 */
        public sendGameChat(targetUserID,szChatString) {

        }

        /**退出房间 */
        public onExitRoom(message: string) {

        }
    }
}